package com.rustamsaga.dagger.di

import android.app.Activity
import android.app.Application
import com.rustamsaga.dagger.*
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.components.ActivityComponent
import dagger.hilt.android.scopes.ActivityScoped
import dagger.hilt.components.SingletonComponent
import javax.inject.Singleton

@Module
// list of components - SingletonComponent - it AppComponent generated by hilt
@InstallIn(SingletonComponent::class)
class StoreModule {

    // All of activities and fragments and other knows about this object
    @Provides
    fun provideDatabaseHelper(app: Application): DatabaseHelper {
        return DatabaseHelper(app)
    }
}

@Module
// list of components - ActivityComponent - it component for all activities, generated by hilt
@InstallIn(ActivityComponent::class)
class OrderNetworkModule {

    // In this example AppComponent doesn't know about this object

    @Provides
    fun provideNetworkUtils(app: Application, activity: Activity): NetworkUtils {
        return NetworkUtils(app, activity as OrderActivity)
    }
}

@Module
@InstallIn(ActivityComponent::class)
class UserNetworkModule{

    @Provides
    fun provideNetworkUtils(app: Application, activity: Activity): NetworkUtils{
        return NetworkUtils(app, activity as UserActivity)
    }
}

// AppComponent->ActivityComponent->FragmentComponent
//@Module
//@InstallIn(FragmentComponent::class)
//class FragmentModule{
//    //...
//    AppComponent and ActivityComponent don't know about these objects
//    @Provides
//    fun provideNetworkUtils(app: Application, activity: Activity, fragment: Fragment): NetworkUtils{
//        return NetworkUtils(app, activity, fragment)
//    }
//}